// PLUS MINUS
class Result {
public static void plusMinus(List<Integer> arr) {
        float c1=0;
        float c2=0;
        float c3=0;
        int n=arr.size();
     for(int i=0;i<n;i++){
         if(arr.get(i)<0){
             c1++;
         }
         else if(arr.get(i)>0){
             c2++;
         }
         else{
             c3++;
         }
     }
     
     c1/=n;
     c2/=n;
     c3/=n;
     System.out.println(c2);
     System.out.println(c1);
     System.out.println(c3);
    }

}

//MINI-MAX SUM
class Result {
public static void miniMaxSum(List<Integer> arr) {
        long min = 0;
        long max=0;
        Collections.sort(arr);
      for(int i=0;i<4;i++){
          min+=arr.get(i);
      }
      for(int j=1;j<5;j++){
          max+=arr.get(j);
      }
    System.out.println(min+" "+max);
    }

}

//TIME CONVERSION
class Result {
public static String timeConversion(String s) {
        
        String str = "";
        if(s.substring(8,10).equals("AM")){
            if(s.substring(0,2).equals("12")){
               
                str="00"+s.substring(2,8);
            }
            else{
                str = s.substring(0,8);
            }
        }
        else{
            if(s.substring(0,2).equals("12")){
                str = s.substring(0,8);
            }
            else{
                int hh = Integer.parseInt(s.substring(0,2));
                hh = hh+12;
                str = Integer.toString(hh);
                str=str+s.substring(2,8);
            }
        }
        return str;
    }
   
}

//SPARSE ARRAYS
class Result {
public static List<Integer> matchingStrings(List<String> strings, List<String> queries) {
       Map<String,Integer> map = new HashMap<String,Integer>();
       List<Integer> a = new ArrayList<>();
       int n = strings.size();
       int m = queries.size();
       for(int i = 0;i<n;i++){
           
           String s = strings.get(i);
           if(map.containsKey(s)){
               map.put(s,map.get(s)+1);
           }
           else{
               map.put(s,1);
           }
       }
       for(int i = 0;i<m;i++){
           String st = queries.get(i);
           if(map.containsKey(st)){
               a.add(map.get(st));
           }
           else{
               a.add(0);
           }
       }
       return a;

    }

}

//LONELY INTEGER
class Result {
public static int lonelyinteger(List<Integer> a) {
      for(int i=0;i<a.size();i++){
         int c = Collections.frequency(a,a.get(i));
          if(c==1){
              return a.get(i);
          }
      }
      return 0;

    }

}

//DIAGONAL DIFFERENCE
class Result {
public static int diagonalDifference(List<List<Integer>> arr) {
      int a=0;
      int b=0;
      for(int i=0;i<arr.size();i++){
          for(int j=0;j<arr.size();j++){
              if(i==j){
                  a=a+arr.get(i).get(j);
              }
              if((i + j) == (arr.size() - 1)){
                    b += arr.get(i).get(j);
                }
          }
      }
      return Math.abs(a-b);

    }

}

//COUNTING SORT 1
class Result {
public static List<Integer> countingSort(List<Integer> arr) {
        Map<Integer,Integer> map = new HashMap<Integer,Integer>();
      List<Integer> a = new ArrayList<>();
      Collections.sort(arr);
      int max = arr.get(arr.size()-1);
      for(int j=0;j<arr.size();j++){
          int s = arr.get(j);
          if(map.containsKey(s)){
              map.put(s,map.get(s)+1);
          }
          else{
              map.put(s,1);
          }
      }
      for(int k=0;k<100;k++){
          if(map.containsKey(k)){
              a.add(map.get(k));
          }
          else{
              a.add(0);
          }
      }
      return a;
    }

}

//Flipping Bits
class Result {
public static long flippingBits(long n) {
        String st = "";
      String s = Long.toBinaryString(n);
      int a=s.length();
      for(int i=0;i<32-a;i++){
          st+="0";
      }
      st=st+s;
      
      String str = "";
      for(int i=0; i<32; i++){
          if (st.charAt(i) == '1'){
              str += "0";
          }
          else{
              str += "1";
          }
      }
      
      Long l = Long.parseLong(str,2);
      
         
      return l;
    }

}

//Pangrams
class Result {
public static String pangrams(String s) {
        Set<Character> set = new TreeSet<>();
      s=s.replaceAll(" ","");
      s=s.toLowerCase();
      for(int i =0;i<s.length();i++){
          set.add(s.charAt(i));
      }
      if(set.size()==26){
          return "pangram";
      }
      else{
          return "not pangram";
      }
     

    }

}

//Permuting Two Arrays
class Result {
public static String twoArrays(int k, List<Integer> A, List<Integer> B) {
        int n = A.size();
        int count = 0;
        Collections.sort(A);
        Collections.sort(B,Collections.reverseOrder());
      for(int i=0;i<n;i++){
              if(A.get(i)+B.get(i)>=k){
                  count++;
              }
              else{
                  return "NO";
              }
          }
          if(count == n){
              return "YES";
          }
          return "";

    }

}

//Subarray Division 1
class Result{
public static int birthday(List<Integer> s, int d, int m) {
        int result = 0;
        int n = s.size();
      for(int i = 0; i < n-m+1; i++){
            int tmpSum = 0;
            for(int j = i; j < i+m; j++){
                tmpSum+= s.get(j);
            } 
            if(tmpSum == d){
                result++;
            }
        }
       return result;
    }

}

//XOR Strings 2
public class Solution {
    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        String t = sc.nextLine();
        int n = s.length();
        String st = "";
        for(int i = 0;i<n;i++){
            if(s.charAt(i)==t.charAt(i)){
                st = st+'0';
            }
            else{
                st=st+'1';
            }
        }
        System.out.println(st);
    }
}
