//Sales by Match
class Result{
public static int sockMerchant(int n, List<Integer> ar) {
      Map<Integer,Integer> map = new HashMap<>();
      int a=0;
      for(int i=0;i<ar.size();i++){
          if(map.containsKey(ar.get(i))){
              map.put(ar.get(i),map.get(ar.get(i))+1);
          }
          else{
              map.put(ar.get(i),1);
          }
      }
      for(int i=0;i<101;i++){
          if(map.containsKey(i)){
                 a =a + map.get(i)/2; 
                }
                
      }
      return a;

    }

}

//Zig Zag Sequence
class Result{
public static void findZigZagSequence(int [] a, int n){
        Arrays.sort(a);
        int mid = n/2;
        int temp = a[mid];
        a[mid] = a[n - 1];
        a[n - 1] = temp;
    
        int st = mid + 1;
        int ed = n - 2;
        while(st <= ed){
            temp = a[st];
            a[st] = a[ed];
            a[ed] = temp;
            st = st + 1;
            ed = ed - 1;
        }
        for(int i = 0; i < n; i++){
            if(i > 0) System.out.print(" ");
            System.out.print(a[i]);
        }
        System.out.println();
    }
}

//Drawing Book
class Result{
public static int pageCount(int n, int p) {
        int a;
        if(n%2!=0){
     if(p<=n/2){
          a = p/2;
     }
     else{
         a=(n-p)/2;
     }
        }
        else{
            if(p<=n/2){
          a = p/2;
     }
     else{
         a=(n-p+1)/2;     }
        }
     return a;

    }

}

//Min-Max
class Result{
public static int maxMin(int k, List<Integer> arr) {

      Collections.sort(arr);
      int n = arr.size();
      int m = arr.get(n-1);
      for (int i = 0; i <= n - k; i++)
      m = Math.min(m, arr.get(i + k - 1) - arr.get(i));
 

   return m;

    }

}

//Ceaser Cipher
class Result{
public static String caesarCipher(String s, int k) {
       String st = "";
       int n = s.length();
       for(int i=0;i<n;i++){
           char ch = s.charAt(i);
           int a = (int)ch;
           if(k<26){
               k=k+0;
           }
           else{
               k=k%26;
           }
           if(a>96 && a<123){
               if(a>122-k){
                   a=((a+k)%122)+96;
               }
               else{
                   a=a+k;
               }
           }
           else if(a>64 && a<91){
               if(a>90-k){
                   a=((a+k)%90)+64;
               }
               else{
                   a=a+k;
               }
           }
           else{
               a=a+0;
           }
         st=st+(char)a;  
       }
       return st;

    }

}

//Recursive digit sum
class Result{
public static int superDigit(String n, int k) {
         int temp = findSum(n) * k;
        
        if(temp>9){
            temp = findSum(String.valueOf(temp));
        }

        return temp;
    }
    
    static int findSum(String num){
        if(num.length() == 1){
            return Integer.parseInt(num);
        }
        
        int sum =0;
        for(int i=0; i<num.length(); i++){
            sum += Integer.parseInt(String.valueOf(num.charAt(i)));
        }
        
        return findSum(String.valueOf(sum));
    }
}

//Sherlock and Arrays
class Result{
public static String balancedSums(List<Integer> arr) {
        int n = arr.size();
        int totalSum = 0;
  int runningSum = 0;
  for (int i = 0; i < n; i++) {
    totalSum+= arr.get(i);
  }

  for (int i = 0; i < n; i++) {
    totalSum-= arr.size(i);

    if (runningSum == totalSum) 
      return "YES";
    runningSum+= arr.size(i);
  }
  return "NO";
}
}
