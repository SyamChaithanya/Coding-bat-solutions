//New year Chaos
class Result{
public static void minimumBribes(List<Integer> q) {
       int count = 0;
        boolean flag =false;
        for(int i=q.size();i>=1;--i){
            if(q.get(i-1)!=i){
                if((i-2)>=0 && q.get(i-2)==i){
                    int swap1 = q.get(i-1);
                    int swap2 = q.get(i-2);
                    q.set(i-1,swap2);
                    q.set(i-2,swap1);
                    count=count+1;
                }
                else if((i-3)>=0 && q.get(i-3)==i){
                     int swap1 = q.get(i-1);
                    int swap2 = q.get(i-2);
                    int swap3 = q.get(i-3);
                    q.set(i-1,swap3);
                    q.set(i-2,swap1);
                    q.set(i-3,swap2);
                    count = count+2;
                }
                else{
                    flag=true;
                    break;
                }
            }
        }         
           System.out.println(flag?"Too chaotic":count);
    }
}

//Sherlock and the valid Strings
class Result{
public static String isValid(String s) {
       Map<Character,Integer> map = new HashMap<>();
       Set<Integer> set = new HashSet<>();
       for(int i=0;i<s.length();i++){
       if(map.containsKey(s.charAt(i))){
           map.put(s.charAt(i), map.get(s.charAt(i))+1);
       }
       else{
           map.put(s.charAt(i),1);
       }
       set.add(map.get(s.charAt(i)));
       }
       if(set.size() == 1){
           return "YES";
       }
       else{
           return "NO";
       }
    }
}

//Reversing a linked list
class Result{
public static SinglyLinkedListNode reverse(SinglyLinkedListNode llist) {
      if(llist == null || llist.next == null){
            return llist;
        }
        SinglyLinkedListNode p = llist;
        SinglyLinkedListNode q = llist.next;
        SinglyLinkedListNode r = q.next;
        p.next = null;
        while(q!=null){
            q.next = p;
            p = q;
            q = r;
            if(r!=null){
                r=r.next;
            }
        }   
        llist = p;
        return llist;
    }
}

//Reverse a doubly linked list
class Result{
public static DoublyLinkedListNode reverse(DoublyLinkedListNode llist) {
    // Write your code here
    DoublyLinkedListNode curr = llist;
    DoublyLinkedListNode nextlist = llist;
    DoublyLinkedListNode prev = null;
    while(curr != null){
        nextlist=nextlist.next;
        curr.next=prev;
        prev=curr;
        curr=nextlist;
    }
    return prev;
    }
}

//Insert node at a specific position
class Result{
public static SinglyLinkedListNode insertNodeAtPosition(SinglyLinkedListNode llist, int data, int position) {
         SinglyLinkedListNode curr = llist;
         SinglyLinkedListNode node  = new SinglyLinkedListNode(data);
         if(llist == null){
              return node;
          }
         for(int i=0; i<position-1; i++){
             curr = curr.next;
         }
         node.next = curr.next;
         curr.next = node;
         return llist;
    }
}

//Ice cream Parlor
class Result{
public static List<Integer> icecreamParlor(int m, List<Integer> arr) {
       List<Integer> l = new ArrayList<>();
       int n = arr.size();
       for(int i=0;i<n;i++){
           for(int j=i+1;j<n;j++){
           if(i!=j && m-arr.get(i)==arr.get(j)){
               l.add(i+1);
               l.add(j+1);
           }
         }
       }
      return l;
    }
}
